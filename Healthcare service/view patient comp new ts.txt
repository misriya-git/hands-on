import { Component, OnInit } from '@angular/core';
import { DataService } from '../../services/data.service';
import { FormGroup, FormBuilder,Validators } from '@angular/forms';
import { Router, ActivatedRoute, ParamMap } from '@angular/router';

import 'rxjs/add/operator/switchMap';
import { DatePipe } from '@angular/common';
import { Appointment } from '../../models/appointment';
import * as alertify from 'alertify.js';

@Component({
  selector: 'app-view-patient',
  templateUrl: './view-patient.component.html',
  styleUrls: ['./view-patient.component.css'],
  providers: [DatePipe]
})
export class ViewPatientComponent implements OnInit {

  patient;
  listOfDiseases;
  today;
  isBookAppointment: boolean = true;
  isFormEnabled: boolean = false;
  isScheduledAppointment: boolean = true;
  isTableEnabled: boolean = false;
  appointmentForm: FormGroup;
  appointmentDetails = new Appointment;
  bookedAppointmentResponse;
  scheduledAppointmentResponse = [];

  constructor(fb: FormBuilder,private route: Router, private datePipe: DatePipe, private activatedRoute: ActivatedRoute, private dataService: DataService) {
    this.today = this.datePipe.transform(Date.now(), 'yyyy-MM-dd');


    // add necessary validators
    this.appointmentForm = fb.group({
      'selectDisease' : ['', [Validators.required]],
      'tentativeDate' : ['', [Validators.required]],
      'priority' : ['', [Validators.required]]
    });
   }

  ngOnInit() {

    // get selected patient id
    this.activatedRoute.queryParams.subscribe(params => {
        const patientId = params['id'];
        console.log(patientId);

        // get Particular Patient from service using patient id and assign response to patient property
        this.dataService.getParticularPatient(patientId).subscribe(res => {
          this.patient = res;
        })
      });
  }

  bookAppointment() {
    // get diseases list from service
    this.dataService.diseasesList().subscribe(res => {
          this.listOfDiseases = res;
        });
    // change isBookAppointment, isScheduledAppointment, isFormEnabled, isTableEnabled property values appropriately
    this.isBookAppointment = false;
    this.isScheduledAppointment = true;
    this.isFormEnabled = true;
    this.isTableEnabled = false;

  }

  scheduleAppointment() {

    // The below attributes to be added while booking appointment using service
    // patientId, fname, lname, disease, priority, tentativedate, registeredTime
     
    this.appointmentDetails.disease = this.appointmentForm.controls['selectDisease'].value;
    this.appointmentDetails.priority = this.appointmentForm.controls['priority'].value;
    this.appointmentDetails.tentativeDate = this.appointmentForm.controls['tentativeDate'].value;
    this.appointmentDetails.fname = this.patient.fname;
    this.appointmentDetails.lname = this.patient.lname;
    this.appointmentDetails.patientId = this.patient._id;
    this.appointmentDetails.registeredTime = this.today;

    this.dataService.scheduleAppointment(this.appointmentDetails).subscribe(res => {
      // if booked successfully should redirect to 'requested_appointments' page
      this.bookedAppointmentResponse = res;
      this.route.navigate(['/requested_appointments']); 
    });    
  }

  scheduledAppointment() {

    // change isBookAppointment, isScheduledAppointment, isFormEnabled, isTableEnabled property values appropriately
    this.isBookAppointment = true;
    this.isScheduledAppointment = false;
    this.isFormEnabled = false;  
    this.isTableEnabled = true;

    // get particular patient appointments using getSinglePatientAppointments method of DataService 
    this.dataService.getSinglePatientAppointments(this.patient._id).subscribe(res => {
          this.scheduledAppointmentResponse = res;
        });
  }

  cancelAppointment(appointmentId) {
    // delete selected appointment uing service
    this.dataService.deleteAppointment(appointmentId).subscribe(res => {
          // After deleting the appointment, get particular patient appointments
          this.dataService.getSinglePatientAppointments(this.patient._id).subscribe(res => {
            this.scheduledAppointmentResponse = res;
          });
        });
  }
  
}
