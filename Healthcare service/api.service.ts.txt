import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';

import { HttpClient, HttpParams } from '@angular/common/http';
import { Inject, Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';

import { Credentials } from '../models/credentials.model';
import { Users } from '../models/users';
import { Patient } from '../models/patient';
import { Appointment } from '../models/appointment';
import { catchError } from 'rxjs/operators';

@Injectable()
export class ApiService {

  API_URL: String;


  constructor(private http: HttpClient) {
    this.API_URL = 'api';

  }

  public checkLogin(uname: string, pwd: string): Observable<any> {
    // should return response from server
    const body = { uname, pwd };
    return this.http.post<any>(this.API_URL+'/login', body)
    .pipe(
      // handle error 
      catchError(this.handleError) 
    );    
  }

  public regNewUser(regNewUser): Observable<any> {
    // should return response from server
    //const body = { regNewUser };
    return this.http.post<any>(this.API_URL+'/register', regNewUser)
    .pipe(
      // handle error 
      catchError(this.handleError) 
    );  
  }

  public getUserDetails(userId: string): Observable<any> {
    // should return user details retireved from server
    //let queryParams = new HttpParams();
    //queryParams = queryParams.append("uid",userId);

    return this.http.get<any>(this.API_URL+'/getProfile?uid='+userId)
    .pipe(
      // handle error 
      catchError(this.handleError) 
    ); 
  }

  public updateDetails(userDetails: any): Observable<any> {
    // should return response from server
    const body = { 
      email: userDetails.email,
      location: userDetails.location,
      mobile: userDetails.mobile,
      uid: userDetails.uid };
    return this.http.put<any>(this.API_URL+'/editProfile', body)
    .pipe(
      // handle error 
      catchError(this.handleError) 
    ); 
  }

  public registerPatient(patientDetails: any): Observable<any> {
    // should return response from server if patientDetails added successfully
    const body = { patientDetails };
    return this.http.post<any>(this.API_URL+'/addPatient', body)
    .pipe(
      // handle error 
      catchError(this.handleError) 
    ); 
  }

  public getAllPatientsList(): Observable<any> {

    // should return all patients from server
    return this.http.get<any>(this.API_URL+'/fetchPatient').pipe(
      // handle error 
      catchError(this.handleError) 
    ); 
  }

  public getParticularPatient(patientId): Observable<any> {
    //let queryParams = new HttpParams();
    //queryParams = queryParams.append("patientId", patientId);

    // should return particular patient details from server
    return this.http.get<any>(this.API_URL+'/fetchSinglePatient?patientId='+patientId)
      .pipe(
      // handle error 
      catchError(this.handleError) 
    ); 
  }

  public diseasesList(): Observable<any> {

    // should return diseases from server
    return this.http.get<any>(this.API_URL+'/diseases').pipe(
      // handle error 
      catchError(this.handleError) 
    );
  }

  public scheduleAppointment(appointmentDetails: any): Observable<any> {

    // should return response from server if appointment booked successfully
    const body = { appointmentDetails };
    return this.http.post<any>(this.API_URL+'/bookAppointment', body)
    .pipe(
      // handle error 
      catchError(this.handleError) 
    ); 
  }

  public requestedAppointments(): Observable<any> {

    // should return all requested appointments from server
    return this.http.get<any>(this.API_URL+'/fetchAppointment').pipe(
      // handle error 
      catchError(this.handleError) 
    );
  }

  public getSinglePatientAppointments(patientId): Observable<any> {

    //let queryParams = new HttpParams();
    //queryParams = queryParams.append("patientId", patientId);

    // should return appointments of particular patient from server
    return this.http.get<any>
      (this.API_URL+'/singlePatientAppointments?patientId='+patientId)
      .pipe(
      // handle error 
      catchError(this.handleError) 
    );
  }

  public deleteAppointment(appointmentId): Observable<any> {

    // should delete the appointment
    //let queryParams = new HttpParams();
    //queryParams = queryParams.append("appointmentId", appointmentId);

    // should return appointments of particular patient from server
    return this.http.delete<any>
    (this.API_URL+'/deleteAppointment?appointmentId='+appointmentId)
    .pipe(
      // handle error 
      catchError(this.handleError) 
    );
  }

  private handleError(error: Response | any) {
    return Observable.throw(error);
  }
  
}
