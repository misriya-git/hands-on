import { async, ComponentFixture, TestBed } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { RouterTestingModule } from '@angular/router/testing';
import {Router, Routes} from "@angular/router";
import { Location } from '@angular/common';

import { HomeComponent } from './home.component';
import { ApiService } from '../../service/api.service';
import { RegisterComponent } from '../register/register.component';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';

describe('HomeComponent', () => {
  let component: HomeComponent;
  let fixture: ComponentFixture<HomeComponent>;

  let location: Location;
  let router: Router;
  //let routerSpy = {navigate: jasmine.createSpy('navigate')};

  beforeEach(() => {
    TestBed.configureTestingModule({
      declarations: [ HomeComponent, RegisterComponent ],
      providers: [
        ApiService//,
        //{ provide: Router, useValue: routerSpy }
      ],
      imports: [
        HttpClientTestingModule,
        ReactiveFormsModule,
        RouterTestingModule.withRoutes([
          {path:'reg', component: RegisterComponent}
        ])
      ]
    })
  });

  beforeEach(() => {
    router = TestBed.get(Router);
    location = TestBed.get(Location); 
    //routerSpy = {navigate: jasmine.createSpy('navigate')};

    fixture = TestBed.createComponent(HomeComponent);
    component = fixture.debugElement.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    //const apiService = fixture.debugElement.injector.get(ApiService);
    //fixture.detectChanges();
    expect(component).toBeTruthy();
  });

  it("should use the Members from the service", () => {
    const apiService = fixture.debugElement.injector.get(ApiService);
    fixture.detectChanges();
    
    component.getMembers();

    apiService.getMembers().subscribe(
      result => 
      expect(result.length).toEqual(component.allMembers.length)); 
      //expect(this.allMembers.length).toBeGreaterThan(0); 
  });

  it("should add a new member", () => {
     const spy = spyOn(router, 'navigate');

     component.addNewMember();
     const url = spy.calls.first().args[0];
     //console.log("url:" + url);
     expect(url[0]).toContain('/reg');     
  });  

  it("should edit a member", () => {
     const spy = spyOn(router, 'navigate');

     this.item = new BehaviorSubject<object>({});
     component.edit(this.item, 1);
     const url = spy.calls.first().args[0];
     //console.log("url:" + url);
     expect(url[0]).toContain('/reg');     
  }); 

  it("should DELETE a member", () => {
     //const spy = spyOn(router, 'navigate');
    fixture.detectChanges();
    //component.getMembers();
    //const memberCount = component.allMembers.length;
     
     component.delete(1, 1);
     const apiService = fixture.debugElement.injector.get(ApiService);
     apiService.getMembers().subscribe(
      result => 
      expect(result.length).toBeGreaterThanOrEqual(0)); 
      
     //const url = spy.calls.first().args[0];
     //console.log("url:" + url);
     //expect(component.allMembers.length).toBeLessThan(memberCount);     
  }); 

});
